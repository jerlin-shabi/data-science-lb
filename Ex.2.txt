Ex.No.2	WORKING WITH NUMPY ARRAYS



Aim :

Write a python program to show the woking of NumPy Arrays in Python.

2a) Use Numpy array to demonstrate basic array characteristics

b) Create Numpy array using list and tuple

c) Apply basic operations (+,_,*./) and find the transpose of the matrix

d) Perform sorting operation with Numpy arrays

Problem Description


 Arrays in NumPy: NumPy’s main object is the homogeneous multidimensional array.

•	It is a table of elements (usually numbers), all of the same type, indexed by a tuple of positive integers.

•	In NumPy dimensions are called axes. The number of axes is rank.

•	NumPy’s array class is called ndarray. It is also known by the alias array.



Example 1:

		Write a python program to demonstrate the basic NumPy array characteristics



import numpy as np

 

# Creating array object

arr = np.array( [[ 1, 2, 3],

                 [ 4, 2, 5]] )

 

# Printing type of arr object

print("Array is of type: ", type(arr))

 

# Printing array dimensions (axes)

print("No. of dimensions: ", arr.ndim)

 

# Printing shape of array

print("Shape of array: ", arr.shape)

 

# Printing size (total number of elements) of array

print("Size of array: ", arr.size)

 

# Printing type of elements in array

print("Array stores elements of type: ", arr.dtype)



Output :

	Array is of type:  <class 'numpy.ndarray'>



No. of dimensions:  2

Shape of array:  (2, 3)

Size of array:  6

Array stores elements of type:  int64

2. Array creation: There are various ways to create arrays in NumPy.

•	For example, you can create an array from a regular Python list or tuple using the array function. The type of the resulting array is deduced from the type of the elements in the sequences.

•	Often, the elements of an array are originally unknown, but its size is known. Hence, NumPy offers several functions to create arrays with initial placeholder content. These minimize the necessity of growing arrays, an expensive operation. For example: np.zeros, np.ones, np.full, np.empty, etc.

•	To create sequences of numbers, NumPy provides a function analogous to range that returns arrays instead of lists.

•	arange: returns evenly spaced values within a given interval. step size is specified.

•	linspace: returns evenly spaced values within a given interval. num no. of elements are returned.

•	Reshaping array: We can use reshape method to reshape an array. Consider an array with shape (a1, a2, a3, …, aN). We can reshape and convert it into another array with shape (b1, b2, b3, …, bM). The only required condition is: a1 x a2 x a3 … x aN = b1 x b2 x b3 … x bM . (i.e original size of array remains unchanged.)

•	Flatten array: We can use flatten method to get a copy of array collapsed into one dimension. It accepts order argument. Default value is ‘C’ (for row-major order). Use ‘F’ for column major order.



Example 2:

import numpy as np

 

# Creating array from list with type float

a = np.array([[1, 2, 4], [5, 8, 7]], dtype = 'float')

print ("Array created using passed list:\n", a)

 

# Creating array from tuple

b = np.array((1 , 3, 2))

print ("\nArray created using passed tuple:\n", b)

 

# Creating a 3X4 array with all zeros

c = np.zeros((3, 4))

print ("\nAn array initialized with all zeros:\n", c)

 

# Create a constant value array of complex type

d = np.full((3, 3), 6, dtype = 'complex')

print ("\nAn array initialized with all 6s.")

 print( "Array type is complex:\n", d)

 

# Create an array with random values

e = np.random.random((2, 2))

print ("\nA random array:\n", e)

 

# Create a sequence of integers

# from 0 to 30 with steps of 5

f = np.arange(0, 30, 5)

print ("\nA sequential array with steps of 5:\n", f)

 

# Create a sequence of 10 values in range 0 to 5

g = np.linspace(0, 5, 10)

print ("\nA sequential array with 10 values between"

                                        "0 and 5:\n", g)

 

# Reshaping 3X4 array to 2X2X3 array

arr = np.array([[1, 2, 3, 4],

                [5, 2, 4, 2],

                [1, 2, 0, 1]])

 

newarr = arr.reshape(2, 2, 3)

 

print ("\nOriginal array:\n", arr)

print ("Reshaped array:\n", newarr)

 

# Flatten array

arr = np.array([[1, 2, 3], [4, 5, 6]])

flarr = arr.flatten()

 

print ("\nOriginal array:\n", arr)

print ("Fattened array:\n", flarr)



OUTPUT

Array created using passed list:

 [[ 1.  2.  4.]

 [ 5.  8.  7.]]



Array created using passed tuple:

	 [1 3 2]



An array initialized with all zeros:

 [[ 0.  0.  0.  0.]

 [ 0.  0.  0.  0.]



[ 0.  0.  0.  0.]]



An array initialized with all 6s. Array type is complex:

 [[ 6.+0.j  6.+0.j  6.+0.j]

 [ 6.+0.j  6.+0.j  6.+0.j]

 [ 6.+0.j  6.+0.j  6.+0.j]]



A random array:

 [[ 0.46829566  0.67079389]

 [ 0.09079849  0.95410464]]



A sequential array with steps of 5:

	 [ 0  5 10 15 20 25]



A sequential array with 10 values between 0 and 5:

 [ 0.          0.55555556  1.11111111  1.66666667  2.22222222  2.77777778

3.33333333  3.88888889  4.44444444  5.        ]



Original array:

 [[1 2 3 4]

 [5 2 4 2]

 [1 2 0 1]]

Reshaped array:

 [[[1 2 3]

  [4 5 2]]

 [[4 2 1]

  [2 0 1]]]



Original array:

 [[1 2 3]

 [4 5 6]]

Fattened array:

	 [1 2 3 4 5 6]



3. Basic operations: 



Operations on single array: We can use overloaded arithmetic operators to do element-wise operation on array to create a new array. In case of +=, -=, *= operators, the existing array is modified.



Program 3:

import numpy as np

 

a = np.array([1, 2, 5, 3])

 

# add 1 to every element

print ("Adding 1 to every element:", a+1)

 

# subtract 3 from each element

print ("Subtracting 3 from each element:", a-3)

 

# multiply each element by 10

print ("Multiplying each element by 10:", a*10)

 

# square each element

print ("Squaring each element:", a**2)

 

# modify existing array

a *= 2

print ("Doubled each element of original array:", a)

 

# transpose of array

a = np.array([[1, 2, 3], [3, 4, 5], [9, 6, 0]])

 

print ("\nOriginal array:\n", a)

print ("Transpose of array:\n", a.T)



Output

Adding 1 to every element: [2 3 6 4]

Subtracting 3 from each element: [-2 -1  2  0]

Multiplying each element by 10: [10 20 50 30]

Squaring each element: [ 1  4 25  9]

Doubled each element of original array: [ 2  4 10  6]



Original array:

 [[1 2 3]

 [3 4 5]

 [9 6 0]]

Transpose of array:

 [[1 3 9]

 [2 4 6]

 [3 5 0]]



4. Sorting array: There is a simple np.sort method for sorting NumPy arrays. Let’s explore it a bit.

Program 4:

import numpy as np

 

a = np.array([[1, 4, 2],

                 [3, 4, 6],

              [0, -1, 5]])

 

# sorted array

print ("Array elements in sorted order:\n",

                    np.sort(a, axis = None))

 

# sort array row-wise

print ("Row-wise sorted array:\n",

                np.sort(a, axis = 1))

 

# specify sort algorithm

print ("Column wise sort by applying merge-sort:\n",

            np.sort(a, axis = 0, kind = 'mergesort'))

 

# Example to show sorting of structured array

# set alias names for dtypes

dtypes = [('name', 'S10'), ('grad_year', int), ('cgpa', float)]

 

# Values to be put in array

values = [('Hrithik', 2009, 8.5), ('Ajay', 2008, 8.7),

           ('Pankaj', 2008, 7.9), ('Aakash', 2009, 9.0)]

            

# Creating array

arr = np.array(values, dtype = dtypes)

print ("\nArray sorted by names:\n",

            np.sort(arr, order = 'name'))

             

print ("Array sorted by graduation year and then cgpa:\n",

                np.sort(arr, order = ['grad_year', 'cgpa']))



OUTPUT

Array elements in sorted order:

	[-1  0  1  2  3  4  4  5  6]

Row-wise sorted array:

[[ 1  2  4]

 [ 3  4  6]

 [-1  0  5]]

Column wise sort by applying merge-sort:

[[ 0 -1  2]

 [ 1  4  5]

 [ 3  4  6]]



Array sorted by names:

[('Aakash', 2009, 9.0) ('Ajay', 2008, 8.7) ('Hrithik', 2009, 8.5)

 ('Pankaj', 2008, 7.9)]

Array sorted by graduation year and then cgpa:

[('Pankaj', 2008, 7.9) ('Ajay', 2008, 8.7) ('Hrithik', 2009, 8.5)

 ('Aakash', 2009, 9.0)]

Result

